let results = arguments[0].value.tokenresults;
let dc = arguments[0].value.dc;
let d20result = results[0].roll.terms[0].results[0].result

let adjust = 0
if (d20result == 20){
    adjust = 10
}
if (d20result == 1){
    adjust = -10
}

let goto = [];
goto.push({ tokens: await Promise.all(results.filter(r => (r.roll.total + adjust) <= (dc-10)).map(async (t) => { return await fromUuid(t.uuid); })), tag: 'Critical Fail' });
goto.push({ tokens: await Promise.all(results.filter(r => (r.roll.total + adjust) >= (dc-10) && (r.roll.total + adjust) < dc).map(async (t) => { return await fromUuid(t.uuid); })), tag: 'Fail' });
goto.push({ tokens: await Promise.all(results.filter(r => (r.roll.total + adjust) >= dc && (r.roll.total + adjust) < (dc+10)).map(async (t) => { return await fromUuid(t.uuid); })), tag: 'Success' });
goto.push({ tokens: await Promise.all(results.filter(r => (r.roll.total + adjust) >= (dc+10)).map(async (t) => { return await fromUuid(t.uuid); })), tag: 'Critical Success' });

goto = goto.filter(g => g.tokens.length > 0);
return {goto: goto};
